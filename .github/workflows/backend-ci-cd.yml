name: LexiWaves Backend CI/CD Pipeline

on:
  push:
    branches: 
      - main 
    paths:
      - 'Server/**'

jobs:
  test:
    runs-on: ubuntu-latest
    env:
      SECRET_KEY: 'django-insecure-test-key-123'
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Install dependencies
        env:
          SECRET_KEY: 'django-insecure-test-key-123'
          DB_HOST: localhost
          DB_NAME: test_db
          DB_USER: postgres
          DB_PASSWORD: postgres
          DB_PORT: 5432
          STRIPE_SECRET_KEY: 'test-stripe-key'
          STRIPE_PUBLISHABLE_KEY: 'test-stripe-pub-key'
          STRIPE_WEBHOOK_SECRET: 'test-webhook-secret'
          EMAIL_HOST_USER: 'test@example.com'
          EMAIL_HOST_PASSWORD: 'test-password'
          AWS_ACCESS_KEY_ID: 'test-aws-key'
          AWS_SECRET_ACCESS_KEY: 'test-aws-secret'
          AGORA_APP_ID: 'test-agora-id'
          AGORA_APP_CERTIFICATE: 'test-agora-cert'
          CELERY_BROKER_URL: 'redis://localhost:6379/0'
          CELERY_RESULT_BACKEND: 'redis://localhost:6379/0'
        run: |
          cd Server
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          rm -rf */migrations/
          python manage.py makemigrations accounts
          python manage.py migrate accounts  
          python manage.py makemigrations
          python manage.py migrate

      - name: Run tests with pytest
        env:
          SECRET_KEY: 'django-insecure-test-key-123'
          DB_HOST: localhost
          DB_NAME: test_db
          DB_USER: postgres
          DB_PASSWORD: postgres
          DB_PORT: 5432
          STRIPE_SECRET_KEY: ${{ secrets.STRIPE_SECRET_KEY }}
          STRIPE_PUBLISHABLE_KEY: ${{ secrets.STRIPE_PUBLISHABLE_KEY }}
          STRIPE_WEBHOOK_SECRET: ${{ secrets.STRIPE_WEBHOOK_SECRET }}
          EMAIL_HOST_USER: ${{ secrets.EMAIL_HOST_USER }}
          EMAIL_HOST_PASSWORD: ${{ secrets.EMAIL_HOST_PASSWORD }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AGORA_APP_ID: ${{ secrets.AGORA_APP_ID }}
          AGORA_APP_CERTIFICATE: ${{ secrets.AGORA_APP_CERTIFICATE }}
          CELERY_BROKER_URL: ${{ secrets.CELERY_BROKER_URL }}
          CELERY_RESULT_BACKEND: ${{ secrets.CELERY_RESULT_BACKEND }}
        run: | 
          cd Server
          pytest --cov=. --cov-report=xml --cov-report=term-missing

  sonarcloud:
    needs: test
    name: SonarCloud Analysis
    runs-on: ubuntu-latest
    env:
      SECRET_KEY: ${{ secrets.SECRET_KEY }}
      DB_NAME: ${{ secrets.DB_NAME }}
      DB_USER: ${{ secrets.DB_USER }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      DB_HOST: ${{ secrets.DB_HOST }}
      DB_PORT: ${{ secrets.DB_PORT }}
      STRIPE_SECRET_KEY: ${{ secrets.STRIPE_SECRET_KEY }}
      STRIPE_PUBLISHABLE_KEY: ${{ secrets.STRIPE_PUBLISHABLE_KEY }}
      STRIPE_WEBHOOK_SECRET: ${{ secrets.STRIPE_WEBHOOK_SECRET }}
      EMAIL_HOST_USER: ${{ secrets.EMAIL_HOST_USER }}
      EMAIL_HOST_PASSWORD: ${{ secrets.EMAIL_HOST_PASSWORD }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AGORA_APP_ID: ${{ secrets.AGORA_APP_ID }}
      AGORA_APP_CERTIFICATE: ${{ secrets.AGORA_APP_CERTIFICATE }}
      CELERY_BROKER_URL: ${{ secrets.CELERY_BROKER_URL }}
      CELERY_RESULT_BACKEND: ${{ secrets.CELERY_RESULT_BACKEND }}

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  docker:
    needs: [test, sonarcloud]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2  
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: ./Server
          file: ./Server/Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/lexiwaves-backend:latest




